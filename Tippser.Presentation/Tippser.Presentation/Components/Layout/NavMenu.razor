@using Tippser.Presentation.Client.Resources
@using Microsoft.AspNetCore.Components.Authorization
@using Tippser.Presentation.Client.Services

@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager nav

@implements IDisposable
@inject SharedStateService state;

@rendermode InteractiveServer

<AuthorizeView>
    <Authorized>
        @{
            foreach (var page in Pages.Where(r => r.AuthRequired == true))
            {
                if (CurrentUrl == page.Url)
                {
                    <a disabled class="@(GetClass(page.Url))">
                        @(page.Text)
                    </a>
                }
                else
                {
                    <a class="@(GetClass(page.Url))" @onclick="@((e) => SetState(page.Url, page.Order))">
                        @(page.Text)
                    </a>
                }
            }
        }
    </Authorized>

    <NotAuthorized>
        @{
            foreach (var page in Pages.Where(r => r.AuthRequired == false))
            {
                if (CurrentUrl == page.Url)
                {
                    <a disabled class="@(GetClass(page.Url))">
                        @(page.Text)
                    </a>
                }
                else
                {
                    <a class="@(GetClass(page.Url))" @onclick="@((e) => SetState(page.Url, page.Order))">
                        @(page.Text)
                    </a>
                }
            }
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<NavMenuModel> Pages = new List<NavMenuModel>()
    {
        new NavMenuModel("account/signin",PresentationResources.SIGNIN, 1,false ),
        new NavMenuModel("account/create",PresentationResources.CREATEACCOUNT, 2,false ),
        new NavMenuModel("account/forgotpassword",PresentationResources.FORGOTPASSWORD,3, false ),
        new NavMenuModel("standings",PresentationResources.STANDINGS,1, true ),
        new NavMenuModel("bets",PresentationResources.BETS,2, true),
        new NavMenuModel("account",PresentationResources.ACCOUNT, 3,true )
    };

    private string? CurrentUrl;

    public async Task SetState(string url, int newOrder)
    {
        int oldOrder = 0;

        switch (CurrentUrl)
        {
            case null:
                break;
            case var cu when cu!.ToLower().Contains("account/signin"):
                oldOrder = 1;
                break;
            case var cu when cu!.ToLower().Contains("account/create"):
                oldOrder = 2;
                break;
            case var cu when cu!.ToLower().Contains("account/forgotpassword"):
                oldOrder = 3;
                break;
            default:
                break;
        }

        var exitClass = "tab-hidden-l";
        var entryClass = "tab-hidden-r";

        if (oldOrder > newOrder)
        {
            exitClass = "tab-hidden-r";
        }

        switch (exitClass)
        {
            case "tab-hidden-l":
                entryClass = "tab-hidden-r";
                break;
            case "tab-hidden-r":
                entryClass = "tab-hidden-l";
                break;
        }

        state.Set(entryClass, exitClass);

        await Task.Delay(100);

        nav.NavigateTo(url);
    }

    public string GetClass(string elm)
    {
        if (CurrentUrl!.ToLower().Contains(elm.ToLower()))
        {
            return "btn btn-active";
        }

        return "btn";
    }

    protected override void OnInitialized()
    {
        CurrentUrl = nav.ToBaseRelativePath(nav.Uri);
        nav.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        CurrentUrl = nav.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        nav.LocationChanged -= OnLocationChanged;
    }

    private class NavMenuModel(string page, string text, int order, bool authRequired)
    {
        public string Url { get; set; } = page;
        public string Text { get; set; } = text;
        public int Order { get; set; } = order;
        public bool AuthRequired { get; set; } = authRequired;
    }
}

