@page "/account/forgotpassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Tippser.Presentation.Client.Resources
@using Tippser.Core.Entities
@using Tippser.Infrastructure.Data;
@using Tippser.Presentation.Client.Services

@rendermode InteractiveServer

@inject UserManager<Person> userManager
@inject IEmailSender<Person> emailSender
@inject NavigationManager nav
@inject IdentityRedirectManager redirectManager
@inject SharedStateService state;
@inject IJSRuntime js

<PageTitle>@PresentationResources.FORGOTPASSWORD</PageTitle>

<div id="tabId" style="display:none;" class="@VisibilityClass tab row mt-5 justify-content-center">
    <div class="col-md-4 text-center">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="w-100 mb-3">
                <InputText @bind-Value="Input.Email" class="text-input" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            </div>
            <div class="w-100 d-flex align-items-center justify-content-center">    
                <button type="submit" class="btn btn-action">@PresentationResources.ResetPassword</button>
            </div>
        </EditForm>
     </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string VisibilityClass = "tab-hidden-r";

    protected override async Task OnInitializedAsync()
    {
        state.OnChange += StateChanged;
        await Task.Delay(100);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("showComponent", "tabId");
            VisibilityClass = "tab-active";
        }
    }

    public void Dispose()
    {
        state.OnChange -= StateChanged;
    }

    public void StateChanged()
    {
        VisibilityClass = "tab-hidden-r";
        Task.Delay(1000).ContinueWith(_ => { });
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await userManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await userManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            redirectManager.RedirectTo("account/forgotpasswordconfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await userManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = nav.GetUriWithQueryParameters(
            nav.ToAbsoluteUri("account/resetpassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await emailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        redirectManager.RedirectTo("account/forgotpasswordconfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
