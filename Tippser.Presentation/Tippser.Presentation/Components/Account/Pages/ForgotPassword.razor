@page "/account/forgotpassword"

@rendermode InteractiveServer

@inject UserManager<Person> userManager
@inject IEmailSender<Person> emailSender
@inject HttpClient api
@inject NavigationManager nav
@inject IdentityRedirectManager redirect
@inject SharedStateService state
@inject IJSRuntime js


<PageTitle>@PresentationResources.FORGOTPASSWORD</PageTitle>

<div id="tabId" style="display:none;" class="@VisibilityClass tab row mt-5 justify-content-center">
    <div class="col-md-4 text-center">
        <EditForm Model="Input" method="post" OnValidSubmit="SendEmail" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="w-100 mb-3">
                <InputText @bind-Value="Input.Email" class="text-input" autocomplete="username" aria-required="true" placeholder="@(PresentationResources.EmailPlaceholder)" />
            </div>
            <div class="w-100 d-flex align-items-center justify-content-center">
                <button type="submit" class="btn btn-action">@PresentationResources.ResetPassword</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string VisibilityClass = string.Empty;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        VisibilityClass = state.EntryClass;
        state.OnChange += StateChanged;
        await Task.Delay(100);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("showComponent", "tabId");
            VisibilityClass = "tab-active";
        }
    }

    public void StateChanged()
    {
        VisibilityClass = state.ExitClass;
        Task.Delay(100).ContinueWith(_ => { });
        state.OnChange -= StateChanged;
    }

    public async Task SendEmail()
    {
        var user = await userManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await userManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            redirect.RedirectTo("account/forgotpasswordconfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await userManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = nav.GetUriWithQueryParameters(
            nav.ToAbsoluteUri("account/resetpassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await emailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        redirect.RedirectTo("account/forgotpasswordconfirmation");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceType = typeof(PresentationResources), ErrorMessageResourceName = nameof(PresentationResources.Error_EmailRequired))]
        [EmailAddress(ErrorMessageResourceType = typeof(PresentationResources), ErrorMessageResourceName = nameof(PresentationResources.Error_EmailInvalid))]
        public string Email { get; set; } = "";
    }
}
